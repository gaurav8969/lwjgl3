package scenes;import contra.Window;import imgui.ImGui;import org.joml.Vector2f;import org.joml.Vector3f;import physics2D.Physics2D;import renderer.Renderer;import renderer.DebugDraw;import com.google.gson.Gson;import com.google.gson.GsonBuilder;import components.Component;import components.ComponentDeserializer;import components.Transform;import contra.Camera;import contra.GameObject;import contra.GameObjectDeserializer;import java.io.FileWriter;import java.io.IOException;import java.nio.file.Files;import java.nio.file.Paths;import java.util.ArrayList;import java.util.List;import java.util.Optional;public  class Scene {    private SceneInitializer sceneInitializer;    private Renderer renderer;    private DebugDraw debugDraw;    private Camera camera;    private boolean isRunning;    private List<GameObject> gameObjects;    private Physics2D physics2D;    public Scene(SceneInitializer sceneInitializer){        this.sceneInitializer = sceneInitializer;        this.renderer = new Renderer();        this.debugDraw = new DebugDraw();        this.isRunning = false;        this.gameObjects = new ArrayList<>();        this.physics2D = new Physics2D();    }    public void init(){        this.camera = new Camera(new Vector2f(0, 0));        this.sceneInitializer.loadResources(this);        this.sceneInitializer.init(this);    }    public void start(){        for(GameObject go: gameObjects){            go.init();            this.renderer.add(go);            this.physics2D.add(go);        }        isRunning = true;    }    public void update(float dt){        this.physics2D.update(dt);        for(int i = 0; i < gameObjects.size(); i++){            GameObject go = gameObjects.get(i);            go.update(dt); //realtime update, editor is updated separately            if(go.isDead()){                gameObjects.remove(i);                this.renderer.destroyGameObject(go);                this.physics2D.destroyGameObject(go);                i--;            }        }    }    public void editorUpdate(float dt){        for(int i = 0; i < gameObjects.size(); i++){            GameObject go = gameObjects.get(i);            go.editorUpdate(dt);            if (go.isDead()) {                gameObjects.remove(i);                this.renderer.destroyGameObject(go);                this.physics2D.destroyGameObject(go);                i--;            }        }        sceneInitializer.update(dt);    }    public void render(){this.renderer.render();}    public void destroy(){        for (GameObject go: gameObjects){            go.destroy();        }    }    public List<GameObject> getGameObjects(){return this.gameObjects;}    public void save(){        Gson gson = new GsonBuilder()                    .setPrettyPrinting()                .registerTypeAdapter(Component.class,new ComponentDeserializer())                .registerTypeAdapter(GameObject.class,new GameObjectDeserializer())                .create();        try{            FileWriter writer = new FileWriter("level.txt");            List<GameObject> serializableGameObjects= new ArrayList<>();            for(GameObject go: gameObjects){                if(go.isSerializable()){                    serializableGameObjects.add(go);                }            }            writer.write(gson.toJson(serializableGameObjects));            writer.close();        } catch(IOException e){            e.printStackTrace();        }    }    public void load(){        Gson gson = new GsonBuilder()                .setPrettyPrinting()                .registerTypeAdapter(Component.class, new ComponentDeserializer())                .registerTypeAdapter(GameObject.class, new GameObjectDeserializer())                .create();        String inputFile = "";        try{            inputFile = new String(Files.readAllBytes(Paths.get("level.txt")));        }catch(IOException e){            e.printStackTrace();        }        if(!inputFile.equals("")){            GameObject[] objs = gson.fromJson(inputFile, GameObject[].class);            int goIDMax = -1;            int componentIDMax = -1;            for(GameObject go: objs){                Component[] components = go.getComponents();                for(Component c : components){                    if(c != null && c.getID() > componentIDMax){                        componentIDMax = c.getID();                    }                }                if(go.getID() > goIDMax){                    goIDMax = go.getID();                }                this.gameObjects.add(go);            }            GameObject.loadCounter(++goIDMax);            Component.loadCounter(++componentIDMax);        }    }    public void imGui(){this.sceneInitializer.imGui();}    public void loadResources(){}//override this and always load resources in it before you start using them in a scene    public void addGameObjectToScene(GameObject go){        if(isRunning){            gameObjects.add(go);            go.init();            this.renderer.add(go);            this.physics2D.add(go);        }else{            gameObjects.add(go);        }    }    public GameObject createGameObject(String name){        GameObject go = new GameObject();        go.setName(name);        go.addComponent(new Transform());        go.tf = go.getComponent(Transform.class);        return go;    }    public Camera camera() {        return this.camera;    }    public DebugDraw debugDraw(){return debugDraw;}    public Renderer renderer(){return this.renderer;}    public GameObject getGameObject(int id){        Optional<GameObject> result =  this.gameObjects.stream()                .filter(gameObject -> gameObject.getID() == id)                .findFirst();        return result.orElse(null);    }}