plugins {
    id 'java'
    id 'application'
}

group = 'org.example'
version = '1.0-SNAPSHOT'

project.ext.lwjglVersion = "3.3.4-SNAPSHOT"
project.ext.jomlVersion = "1.10.5"
project.ext.lwjglNatives = "natives-linux"

repositories {
    flatDir {
        dirs 'libs'
    }
    mavenCentral()
    maven { url "https://oss.sonatype.org/content/repositories/snapshots/" }
    google()
}

dependencies {
    //JUnit
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.9.1'
}

test {
    useJUnitPlatform()
}

dependencies {
    // Box2D
    implementation name: 'jbox2d-library'

    // GSON
    implementation 'com.google.code.gson:gson:2.8.6'

    //imgui jar files
    implementation fileTree('libs'){include '*.jar'}

    implementation platform("org.lwjgl:lwjgl-bom:$lwjglVersion")

    implementation "org.lwjgl:lwjgl"
    implementation "org.lwjgl:lwjgl-assimp"
    implementation "org.lwjgl:lwjgl-glfw"
    implementation "org.lwjgl:lwjgl-nfd"
    implementation "org.lwjgl:lwjgl-openal"
    implementation "org.lwjgl:lwjgl-opengl"
    implementation "org.lwjgl:lwjgl-stb"
    runtimeOnly "org.lwjgl:lwjgl::$lwjglNatives"
    runtimeOnly "org.lwjgl:lwjgl-assimp::$lwjglNatives"
    runtimeOnly "org.lwjgl:lwjgl-glfw::$lwjglNatives"
    runtimeOnly "org.lwjgl:lwjgl-nfd::$lwjglNatives"
    runtimeOnly "org.lwjgl:lwjgl-openal::$lwjglNatives"
    runtimeOnly "org.lwjgl:lwjgl-opengl::$lwjglNatives"
    runtimeOnly "org.lwjgl:lwjgl-stb::$lwjglNatives"
    implementation "org.joml:joml:${jomlVersion}"
}

configurations.implementation.canBeResolved = true

jar {
    manifest {
        attributes (
                'Class-Path': configurations.compileClasspath.collect { it.getName() }.join(' '),
                'Main-Class': 'Main'
        )
    }

    from {
        configurations.implementation.collect { it.isDirectory() ? it : zipTree(it) }
    }
}

task copyAssets(type: Copy) {
    copy {
        from "assets"
        into "${buildDir}/libs/assets"
    }

    copy {
        from "level.txt"
        into "${buildDir}/libs"
    }
}

task fatJar(type: Jar) {
    duplicatesStrategy(DuplicatesStrategy.EXCLUDE)
    manifest.from jar.manifest
    from {
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    } {
        exclude "META-INF/*.SF"
        exclude "META-INF/*.DSA"
        exclude "META-INF/*.RSA"
    }
    with jar
}

fatJar.dependsOn(copyAssets)

artifacts {
    archives fatJar
}